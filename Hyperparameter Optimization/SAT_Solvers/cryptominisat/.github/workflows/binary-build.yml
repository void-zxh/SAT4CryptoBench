name: binary build

on:
  push:
    branches:
      - master


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ${{ matrix.os }}


    strategy:
      matrix:
        #os: [ubuntu-20.04, windows-2022, macos-13]
        os: [ubuntu-20.04, macos-13]
        build_type: ['Release']
        staticcompile: ['ON', 'OFF']

    steps:

    
    # install dependencies
    - name: Install boost & help2man for Linux
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev libboost-serialization-dev libboost-program-options-dev help2man libgmp-dev
      
    - name: Install gmp for Mac
      if: matrix.os == 'macos-13'
      run: | 
        HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
        HOMEBREW_NO_AUTO_UPDATE=1 brew install zlib
        wget https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz
        tar xf gmp-6.3.0.tar.xz
        cd gmp-6.3.0
        ./configure --enable-static -enable-cxx --enable-shared
        make -j8
        sudo make install
        cd ..
      
    - name: Installing Numpy
      run: |
        pip install pip --upgrade
        pip install numpy lit

    - name: Checkout Cadical
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadical
        ref: mate-only-libraries-1.8.0
        path: cadical
        
    - name: Build Cadical
      run: |
       cd cadical
       CXX=c++ ./configure
       make -j8
       cd ..

    - name: Checkout Cadiback
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadiback
        ref: mate
        path: cadiback
        
    - name: Build Cadiback
      run: |
       cd cadiback
       CXX=c++ ./configure
       make -j8
       cd ..
       
    - name: checkout
      uses: actions/checkout@v4.1.1        
      with:
        path: cryptominisat
  
    - name: Add git submodules for Linux only (not needed for non-testing)
      working-directory: cryptominisat
      if: matrix.os == 'ubuntu-20.04'
      run: git submodule update --init

    - name: Configure CMake for linux
      if: matrix.os == 'ubuntu-20.04'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      #working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        pwd
        echo "end pwd"
        cd cryptominisat
        pwd
        echo "end pwd"
        ls
        echo "end list"
        ls ../
        echo "end list"
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF  -DSTATICCOMPILE=${{ matrix.staticcompile }}
        cmake --build . --config ${{ matrix.build_type }}

    
    - name: Configure CMake for non-linux
      if: matrix.os != 'ubuntu-20.04'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      #working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        pwd
        echo "end pwd"
        cd cryptominisat
        pwd
        echo "end pwd"
        ls
        echo "end list"
        ls ../
        echo "end list"
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF -DSTATICCOMPILE=${{ matrix.staticcompile }}
        cmake --build . --config ${{ matrix.build_type }}
        ctest -C ${{ matrix.build_type }}
              
    - name: Upload Artifact - Linux
      if: matrix.os == 'ubuntu-20.04' && matrix.staticcompile == 'ON'
      uses: actions/upload-artifact@v4
      with:     
        name: cryptominisat5-linux-amd64
        path: cryptominisat/cryptominisat5
    
    - name: Upload Artifact - Mac
      if: matrix.os == 'macos-13' && matrix.staticcompile == 'ON'
      uses: actions/upload-artifact@v4
      with:
        name: cryptominisat5-mac-amd64
        path: cryptominisat/cryptominisat5

    - name: Upload Artifact - Windows
      if: matrix.os == 'windows-2022' && matrix.staticcompile == 'ON'
      uses: actions/upload-artifact@v4
      with:
        name: cryptominisat5-win64.exe
        path: cryptominisat\Release\cryptominisat5.exe
